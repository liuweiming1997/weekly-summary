周一简单看了看flask的实现原理:

Flask-router:
  使用了werkzeug的Map类，匹配过程使用 compile 的正则表达式去匹配给出的真实路径信息

Flask-wsgi
  wsgi就算是服务器层，自己写的代码叫application层，wsgi相当于nginx，由werkzeug提供。
  wsgi 做的事情：一套关于程序端和服务器端的规范，或者说统一的接口。 
  所以wsgi相当于给我们定好了规范，解析好http协议的内容(environ)

Flask-ctx:
    flask中的上下文，比较特殊的variable比如g, session, request都是每个访问请求特有的“全局变量”，放去全局变量的原因是不想为每个函数都传参，
多线程怎么安全呢？就是每个线程都会创建新的对象，用线程id控制。类似于(threading.local)，这个对象有一个字典，保存了线程 id 对应的数据，
读取该对象的时候，它动态地查询当前线程 id 对应的数据。btw:所有这些东西都是werkzeug提供的。 

Flask-session:
    阅读了flask中session的实现机制：flask通过itsdangerous这个库将session的内容序列化到浏览器的cookie,当浏览器再次请求时将反序列化cookie内容。                            
  cookie通过.分割，分成了三部分：内容序列化 + 时间 + 防篡改值, 前面的内容序列化可以转换出来，是后面的ts和防篡改值不会转换，一直报错误。 

code:
  s = b'\\1x\xc3'
  s.decode("utf-8")

Traceback (most recent call last):     
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xc3 in position 3: unexpected end of data 

  还不知道什么原因，有待探究。总的来说就是这是一个序列化与反序列化的过程，途中flask用了HMAC算法签名。也就是说即使你修改了 
前面的值，由于签名值有误，flask不会使用该session。所以一定要保存好SECRET_KEY
  看到网上说有一个扩展flask-session更安全，只会把session-id给client，但是我觉得这一步可以自己在代码层面实现就可以了？ 


