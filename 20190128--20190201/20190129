  今天更多做的是后台的活，前端的话排版大体上可以控制，不像一开始那么迷茫。做着后台的活，发现自己太多不懂。
start project的意义应该是让我们踩多点坑，懂多点。而不是写出这个功能，就完事。无论是前端还是后台都要多尝试，不然以后工作是不应该有
这么多时间去学习的。
  今天主要做了python的logging控制和阅读了部署的相关资料。
  关于logging，看了fleet_control_center的代码，发现config文件是写死的，放进去docker可以正常跑，但是如果用virtualenv跑的话，就不会存在
那个目录。leader的说法是改config跑，我一开始以为config也是代码库的一部分，不应该随便改呀。现在想一下好像也可以，改回来就行。

  调查了一下python的flask是单线程还是多线程，因为决定我的db要不要加锁。网上都说默认是单线程，我就觉得奇怪明明以前遇到db的bug的，说是
多线程用了全局的db。然后自己测试了一下。在api上time.sleep(10)秒，发现他们基本同步返回。这说明默认是多线程的。还有flask也有多进程的开关，
但是多进程的话要为数据库加锁了，可能需要用touch一个file的方法。
  看到网上的部署方法，nginx + Gunicorn + Flask，很高大上。突然想了一想，nginx背后做了什么？以前用来做静态资源服务器，其他功能有点忽略了。
首先我觉得他肯定不要解析好http的内容，因为他还要转发去Flask里面，Flask有wsgi帮忙解包，放去environ里面，所以不可能弄两次的。手动测试了一下，
加了一下参数上去,不太了解为什么要用nginx，如果是为了处理SSL/HTTPS/转发静态资源，那我觉得不是必须的。

  还没做的:
    mysql可能需要用链接池(多线程的话)，或者多进程，需要处理好锁。
    logging控制好一点。
    部署模块，怎么部署比较好，比较优秀。

  以后需要把这个blog部署起来，以后写博客就放去里面了。
