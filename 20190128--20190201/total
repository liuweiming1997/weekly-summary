  这周更多做的是后台的活，比如model层的数据库操作确实应该是需要返回dict，这样写起来舒服很多。
  后台写log用了logging的TimedRotatingFileHandler这个接口，测试发现效果好像一般，同时写文件和rotating的时候会冲突。
  后台部署用了uwsgi，他是一个master-work的模型，其中worker是单线程接受的，是否busy判断的是worker状态，不是application的状态。这一点
自己测试的时候确实是这样，Gunicorn也是一样。所以就是说，你的application是多线程的，也是没用。那这个时候怎么用上多线程，或者协程处理呢？
  一开始不知道他这个特性，而且看起来vc-server那边是多线程，然后感觉mysql-counter这个任务比较难做，因为开不开log，是对于整一个engine来
说的，所以如果是多线程的话，这样就控制不好了。但是现在是单线程模型，这个还是可以做的，为每一个都开log，后面关闭log。但是我发现统计log
这个方法不是很优秀比如他的log可能有多行，而且好像控制他输出到那个文件这块也不清楚。所以还是决定看看源码找出他和数据库交互的那个接口吧。
一开始看了很久了还是找不到，很难找，决定下一个IDE再找找吧，跳转很复杂。
  看sqlalchemy的源码的时候发现他们import包，也是from ...xxx import y这样的，原来python写代码都是这样import包的？
  也学习了很多python3的魔法变量，__getAttriabute__或者那些__dict__，还有以前想打印python变量有什么属性的时候，直接打印只会得到:
<__main__.vimi at 0x7f46ad6e6da0>，然后现在可以输出他的a.__dict__和type(a).__dict。

  也问了很多问题，因为一开始看小程序，没有看到他是怎么读取环境变量的，原来是__getAttriabute__弄的。
  关于logging，看了fleet_control_center的代码，发现config文件是写死的，放进去docker可以正常跑，但是如果用virtualenv跑的话，就不会存在
那个目录。leader的说法是改config跑，我一开始以为config也是代码库的一部分，不应该随便改呀。现在想一下好像也可以，改回来就行。
  关于garbage_pc，早上来的时候问奶牛说这个web新版用什么写的，他说这是一个client，用xxx写的，具体我忘记了。我还以为这是一个web，然后他
说也不清楚为什么不写web，写web的话可以写的更好一点，理由说是他不需要向外接受消息，他只需要自己发消息，所以写成了client。我一听，很有道理。
现在一想，web可以做到本地localhost访问吧，别人也就访问不了了啊？

  还有关于vehicle_center的前端，看到dockerfile里面用的是npm run start这种方式部署起来的，我直觉他应该就和flask的app.run差不多？
然后我问了前端的人，他们说正规应该是打包后用nginx转发的，这个问题也还没有问。

  因为太弱了以前很多问题都不敢问，不然我的blog也用__getAtrriabute__这种方便的方法。对于python3还是非常的不熟悉。

  前端的话排版大体上可以控制，不像一开始那么迷茫。做着后台的活，发现自己太多不懂。
start project的意义应该是让我们踩多点坑，懂多点。而不是写出这个功能，就完事。无论是前端还是后台都要多尝试，不然以后工作是不应该有
这么多时间去学习的。

  以后需要把这个blog部署起来，以后写博客就放去里面了。
  

过年的话，如果有时间，我可能会学习这些：
  最想学的是：kubernetes的具体用法，非常不熟悉。
  要学的：怎么找出sqlalchemy的对应的接口，这一点非常头大。
  要学的：需要熟悉vehicle-web里面的代码。


