  这周有两个issue处理的不好。
  一个是cancel trip not delete in database的任务，经过公司的洗礼我发现变量名很有用。然后我就很相信endpoint里面的trip中，有一个
CHANGEABLE_TRIP_STATUS，然后我一想如果不把cancel加进去，这个trip的status应该就不能被改变吧。看了一下他的实现好像都有这个判定，就很放心的觉得很合理。所以没有
很认真的看完所有实现，不过看完所有关于trip_status的实现也挺麻烦，然后没看到batch_update里面会根据disk的status再更新一下trip的status，这个逻辑现在我也没细看。
  第二个是最近看到的，关于每2s自动更新trip_status的任务。现在发现，他在create_trip的时候、edit_trip的时候，还是会自动拉取，因为他们属于同一个页面，但是现在
感觉应该需要把他们做到不自动拉取，因为感觉他们不是同一层的页面。
  
  为后台新增加个config接口，用来维护region，其实一开始想到应该用proto的，因为可以直接存id或者对于前端的交互，都是比较友好的，但是想到以后可能很多东西还是需要
去后台拉，现在就先写了，而且用接口拉的话可以做到更灵活。由于前端一开始是写死的，就相当于一开始是：
  region = {
    'xxx': 'yyy'
  }
  下面就直接用了，<div> region['xxx'] </div>
  然后如果用接口拉的话，由于是异步的，所以上面的渲染就会报错。然后只能全部改成state，后台拉成功之后就调用setState来渲染了。但是如果没有setState方法，那需要怎么
做呢，只能用promise那些吧。改起来的代价有点大。
  和朋友聊了一下这个要怎么怎么做呀之类的，其实我是怕改很多代码而已，应该要该很多代码往往会出现bug，而且还是建立在别人代码基础之上，不安全。然后朋友说promise之类
的，然后还聊了一下直出和异步的东西。
  直出就相当于服务器渲染，然后直接放回html，我说这样返回的数据太大了，网络IO消耗太高。然后他们只说首屏直出，其他还是异步，这样第一次就不会白屏，而且他说其实也
没有大多少，异步的话js dom渲染很慢。。然后有一个朋友还说他们全部都是直出了，所以就是node的作用吧，作为中间层。

  发现不是很会用material-ui，比如dialog设置css属性需要classes={{paper: classes.root}}，很是不解。

